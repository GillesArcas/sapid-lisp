; sapid lisp
; startup file
; gilles.arcas@gmail.com, https://github.com/GillesArcas/sapid-lisp
; MIT license

; values from source code
(value (quote macro-char) 5)
(value (quote symbol-char) 7)

; define quote macro character
(typech (quote "'") macro-char)
(de |'| () (cons (quote quote) (cons (read) ())))

(de synonym (x y)
   (fvalue x (fvalue y)) )
   
; load first modules   
(load "backquote.l")
(load "describe.l")

; some helpers

(de reduce-macro (n-ary-op binary-op neutral l)    
    (ifn l
        `(progn ,neutral)
        (ifn (cdr l)
            `(progn ,(car l))
            `(,binary-op ,(car l) ,(optform n-ary-op (cdr l))) ) ) )

(de optform (s l)
    "(optform '+ '(1)) --> 1"
    "(optform '+ '(1 2)) --> (+ 1 2)"
    (if (atom (cdr l))
        (car l)
        (cons s l) ) )
        
; load
(load "std.l")    
(load "print.l")

; autoload
(autoload "pprint.l" pprint pp)
(autoload "trace.l" trace)
(autoload "try.l" try raise testtry)
; (autoload "testing.l" deftest)

; redefine toplevel to benefit of complete print
(de toplevel () 
    (let ((r (eval (read))))
        (print "= " r) ) )

; banner        

(de banner ()
    (cls)
    (terpri)
    (print "sapid lisp: lot of interesting and sapid parentheses")
    (print "quit                  (end)")
    (print "list of symbols       (oblist)")
    (print "description of symbol (help <sym>)")
    (terpri) )
    
(banner)
